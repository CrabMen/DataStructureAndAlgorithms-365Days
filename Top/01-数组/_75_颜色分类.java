/**
 * 
 * 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
 * 
 * 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
 * 
 * 注意: 不能使用代码库中的排序函数来解决这道题。
 * 
 * 示例:
 * 
 * 输入: [2,0,2,1,1,0] 输出: [0,0,1,1,2,2] 进阶：
 * 
 * 一个直观的解决方案是使用计数排序的两趟扫描算法。 首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
 * 你能想出一个仅使用常数空间的一趟扫描算法吗？
 * 
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/sort-colors
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * 
 * 
 * 
 */

/**
 * 时间复杂度为O(n)的原地排序 系统的排序以及常规的排序方法无法满足O(n)的要求;
 * 
 * 题干中的012是否能给你一些新的思路
 * 
 * 分析:
 * 
 * 三指针:
 * 
 * 遇到1:跳过,红色指针++
 * 
 * 遇到0:跟绿色指针交换值,绿色指针++,红色指针++
 * 
 * 遇到2:跟紫色指针交换值,紫色指针--,再次对红色指针的值进行判断
 * 
 * 
 */

class Solution {
    public void sortColors(int[] nums) {
        int i = 0, l = 0, r = nums.length - 1;
        while (i <= r) {
            if (nums[i] == 0) {
                swap(nums, i++, l++);
            } else if (nums[i] == 1) {
                i++;
            } else {
                swap(nums, i, r--);
            }
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}